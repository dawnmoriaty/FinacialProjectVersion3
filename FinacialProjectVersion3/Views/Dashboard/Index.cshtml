@model FinacialProjectVersion3.ViewModels.Dashboard.DashboardViewModel
@using System.Globalization
@{
    ViewData["Title"] = "Dashboard";
    var vietnameseCulture = new CultureInfo("vi-VN");
}

<!-- CDN cho Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container-fluid">
    <h2 class="mb-4">
        <i class="fas fa-tachometer-alt me-2"></i>Dashboard
    </h2>

    <!-- Cards tổng quan -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Tổng Thu Nhập</h6>
                            <h4>@Model.TotalIncome.ToString("C0", vietnameseCulture)</h4>
                        </div>
                        <i class="fas fa-arrow-up fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Tổng Chi Tiêu</h6>
                            <h4>@Model.TotalExpense.ToString("C0", vietnameseCulture)</h4>
                        </div>
                        <i class="fas fa-arrow-down fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card @(Model.Balance >= 0 ? "bg-info" : "bg-warning") text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Số Dư</h6>
                            <h4>@Model.Balance.ToString("C0", vietnameseCulture)</h4>
                        </div>
                        <i class="fas fa-wallet fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Thu Nhập Tháng</h6>
                            <h4>@Model.MonthlyIncome.ToString("C0", vietnameseCulture)</h4>
                        </div>
                        <i class="fas fa-calendar-month fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Biểu đồ -->
    <div class="row mb-4">
        <!-- Biểu đồ đường - Thu chi theo tháng -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-line me-2"></i>Thu Chi 6 Tháng Gần Nhất
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="monthlyChart" height="100"></canvas>
                </div>
            </div>
        </div>

        <!-- Biểu đồ tròn - Chi tiêu theo danh mục -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-pie me-2"></i>Chi Tiêu Tháng Này
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="categoryChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Giao dịch gần đây -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-history me-2"></i>Giao Dịch Gần Đây
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.RecentTransactions.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Ngày</th>
                                        <th>Mô tả</th>
                                        <th>Danh mục</th>
                                        <th>Số tiền</th>
                                        <th>Loại</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var transaction in Model.RecentTransactions)
                                    {
                                        <tr>
                                            <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                                            <td>@transaction.Description</td>
                                            <td>
                                                <span class="badge bg-secondary">
                                                    @(transaction.Category?.Name ?? "Không xác định")
                                                </span>
                                            </td>
                                            <td>
                                                <strong class="@(transaction.Category?.Type == "income" ? "text-success" : "text-danger")">
                                                    @transaction.Amount.ToString("C0", vietnameseCulture)
                                                </strong>
                                            </td>
                                            <td>
                                                <span class="badge @(transaction.Category?.Type == "income" ? "bg-success" : "bg-danger")">
                                                    @(transaction.Category?.Type == "income" ? "Thu nhập" : "Chi tiêu")
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="text-center mt-3">
                            <a href="@Url.Action("Index", "Transaction")" class="btn btn-outline-primary">
                                <i class="fas fa-eye me-2"></i>Xem tất cả giao dịch
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                            <p class="text-muted">Chưa có giao dịch nào</p>
                            <a href="@Url.Action("Create", "Transaction")" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Thêm giao dịch đầu tiên
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Biểu đồ đường - Thu chi theo tháng
    const monthlyCtx = document.getElementById('monthlyChart').getContext('2d');
    const monthlyChart = new Chart(monthlyCtx, {
        type: 'line',
        data: {
            labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ChartLabels)),
            datasets: [{
                label: 'Thu nhập',
                data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.IncomeData)),
                borderColor: 'rgb(75, 192, 192)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                tension: 0.4
            }, {
                label: 'Chi tiêu',
                data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ExpenseData)),
                borderColor: 'rgb(255, 99, 132)',
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return new Intl.NumberFormat('vi-VN', {
                                style: 'currency',
                                currency: 'VND'
                            }).format(value);
                        }
                    }
                }
            }
        }
    });

    // Biểu đồ tròn - Chi tiêu theo danh mục
    const categoryCtx = document.getElementById('categoryChart').getContext('2d');

    // Kiểm tra có dữ liệu không
    @if (Model.CategoryNames.Any())
    {
        <text>
                const categoryChart = new Chart(categoryCtx, {
                    type: 'doughnut',
                    data: {
                        labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.CategoryNames)),
                        datasets: [{
                            data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.CategoryAmounts)),
                            backgroundColor: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.CategoryColors))
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.label || '';
                                        let value = context.raw || 0;

                                        if (label) {
                                            label += ': ';
                                        }
                                        return label + new Intl.NumberFormat('vi-VN', {
                                            style: 'currency',
                                            currency: 'VND'
                                        }).format(value);
                                    }
                                }
                            }
                        }
                    }
                });
        </text>
    }
    else
    {
        <text>
                // Hiển thị thông báo không có dữ liệu
                categoryCtx.fillStyle = '#666';
                categoryCtx.font = '16px Arial';
                categoryCtx.textAlign = 'center';
                categoryCtx.fillText('Chưa có dữ liệu chi tiêu', categoryCtx.canvas.width/2, categoryCtx.canvas.height/2);
        </text>
    }
</script>